SET client_min_messages TO WARNING;

DROP SCHEMA IF EXISTS afma CASCADE;
CREATE SCHEMA afma;
SET search_path = afma;

-- Articles Table
CREATE TABLE IF NOT EXISTS afma.articles (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(255),
  slug VARCHAR(100) DEFAULT '-',
  abstract TEXT,
  content TEXT,
  unit_price DECIMAL,
  inventory INTEGER,
  publish_date DATE,
  last_update DATE,
  subject_class VARCHAR(5),
  volume INTEGER,
  author_id INTEGER  -- Optional: useful if there's a lead or corresponding author
);

-- Math Subject Classifications Table
CREATE TABLE IF NOT EXISTS afma.mathSubjectClassifications (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  subject_class VARCHAR(5) UNIQUE
);

-- Many-to-Many: Article <-> MSC Classification
CREATE TABLE IF NOT EXISTS afma.articles_mathSubjectClassifications (
  article_id INTEGER,
  msc_subject_class VARCHAR(5),
  PRIMARY KEY(article_id, msc_subject_class),
  FOREIGN KEY (article_id) REFERENCES afma.articles(id),
  FOREIGN KEY (msc_subject_class) REFERENCES afma.mathSubjectClassifications(subject_class)
);

-- Authors Table (normalized)
CREATE TABLE IF NOT EXISTS afma.authors (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  email VARCHAR,
  phone VARCHAR(255),
  grade VARCHAR
);

-- Many-to-Many: Articles <-> Authors
CREATE TABLE IF NOT EXISTS afma.articles_authors (
  article_id INTEGER,
  author_id INTEGER,
  PRIMARY KEY(article_id, author_id),
  FOREIGN KEY (article_id) REFERENCES afma.articles(id),
  FOREIGN KEY (author_id) REFERENCES afma.authors(id)
);

-- Affiliations Table (1-to-1 with Authors)
CREATE TABLE IF NOT EXISTS afma.affiliations (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  institution VARCHAR(255),
  postal_code VARCHAR(255),
  country VARCHAR(255),
  author_id INTEGER UNIQUE,
  FOREIGN KEY (author_id) REFERENCES afma.authors(id)
);

-- Customers Table
CREATE TABLE IF NOT EXISTS afma.customers (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  email VARCHAR UNIQUE,
  phone VARCHAR(255),
  birth_date DATE,
  membership_choice VARCHAR
);

-- Orders Table
CREATE TABLE IF NOT EXISTS afma.orders (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  placed_at DATE,
  customer_id INTEGER,
  status VARCHAR,
  FOREIGN KEY (customer_id) REFERENCES afma.customers(id)
);

-- Order Items Table
CREATE TABLE IF NOT EXISTS afma.orderItems (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INTEGER,
  article_id INTEGER,
  quantity INTEGER,
  unit_price DECIMAL,
  FOREIGN KEY (order_id) REFERENCES afma.orders(id),
  FOREIGN KEY (article_id) REFERENCES afma.articles(id)
);

-- Customer Address Table
CREATE TABLE IF NOT EXISTS afma.address (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INTEGER UNIQUE,
  street VARCHAR,
  postal_code VARCHAR(255),
  city VARCHAR(255),
  country VARCHAR(255),
  FOREIGN KEY (customer_id) REFERENCES afma.customers(id)
);

-- üîç Indexes for Foreign Key Columns
CREATE INDEX IF NOT EXISTS idx_articles_subject_class ON afma.articles(subject_class);
CREATE INDEX IF NOT EXISTS idx_articles_author_id ON afma.articles(author_id);
CREATE INDEX IF NOT EXISTS idx_articles_mathSubjectClassifications_article_id ON afma.articles_mathSubjectClassifications(article_id);
CREATE INDEX IF NOT EXISTS idx_articles_mathSubjectClassifications_msc_class ON afma.articles_mathSubjectClassifications(msc_subject_class);
CREATE INDEX IF NOT EXISTS idx_articles_authors_article_id ON afma.articles_authors(article_id);
CREATE INDEX IF NOT EXISTS idx_articles_authors_author_id ON afma.articles_authors(author_id);
CREATE INDEX IF NOT EXISTS idx_affiliations_author_id ON afma.affiliations(author_id);
CREATE INDEX IF NOT EXISTS idx_orders_customer_id ON afma.orders(customer_id);
CREATE INDEX IF NOT EXISTS idx_orderItems_order_id ON afma.orderItems(order_id);
CREATE INDEX IF NOT EXISTS idx_orderItems_article_id ON afma.orderItems(article_id);
CREATE INDEX IF NOT EXISTS idx_address_customer_id ON afma.address(customer_id);

-- üóíÔ∏è Comments
COMMENT ON COLUMN afma.authors.grade IS '
1 = grade_1,
2 = grade_2,
3 = grade_3
';

COMMENT ON COLUMN afma.customers.membership_choice IS 'B = Bronze,
S = Silver,
G = Gold
';

COMMENT ON COLUMN afma.orders.status IS 'üí∏ 1 = processing,
‚úîÔ∏è 2 = shipped,
‚ùå 3 = cancelled,
üòî 4 = refunded
';
